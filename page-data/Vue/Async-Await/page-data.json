{"componentChunkName":"component---src-templates-blog-post-js","path":"/Vue/Async-Await/","result":{"data":{"site":{"siteMetadata":{"title":"Clean Dev","author":"[깔끔한청년]","siteUrl":"https://rlwi440.github.io","comment":{"disqusShortName":"","utterances":"rlwi440/rlwi440.github.io"},"sponsor":{"buyMeACoffeeId":"CleanDev"}}},"markdownRemark":{"id":"292dc212-34fb-5e24-b831-4fe8809e55e6","excerpt":"1.동기식 과 비동기식 처리 1-1. 동기식 처리  코드가 작성된 순서대로 실행됩니다.  1-2.비동기식 처리 \n코드가 작성된 순서와는 상관없이 지정된 순서에 의해 실행됩니다.\n비동기 처리 로는   등이 있습니다.  callback 비동기 처리를 하기위한 하나의 패턴으로 콜백함수를사용한다. 전통적인 콜백패턴은 콜백 헬로 인해 가독성이 나쁘고 비동기 처리중\n발생한 에러의 처리가 곤란하며 여러개의 비동기처리를 한번에 하는곳에대한 한계도있다\n밑에있는 예제들을 참고하시면 됩니다. promise…","html":"<h3 id=\"1동기식-과-비동기식-처리\" style=\"position:relative;\"><a href=\"#1%EB%8F%99%EA%B8%B0%EC%8B%9D-%EA%B3%BC-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%8B%9D-%EC%B2%98%EB%A6%AC\" aria-label=\"1동기식 과 비동기식 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.동기식 과 비동기식 처리</h3>\n<ul>\n<li>1-1. 동기식 처리 </li>\n</ul>\n<p>코드가 작성된 순서대로 실행됩니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function a(){\n  console.log('a')\n}\n\nfunction b(){\n  console.log('b')\n}\na() //a\nb() //b</code></pre></div>\n<ul>\n<li>1-2.비동기식 처리\n코드가 작성된 순서와는 상관없이 지정된 순서에 의해 실행됩니다.\n비동기 처리 로는 <code class=\"language-text\">callback</code> <code class=\"language-text\">promise</code> 등이 있습니다. </li>\n</ul>\n<h2 id=\"callback\" style=\"position:relative;\"><a href=\"#callback\" aria-label=\"callback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>callback</h2>\n<ul>\n<li>비동기 처리를 하기위한 하나의 패턴으로 콜백함수를사용한다.</li>\n<li>전통적인 콜백패턴은 <strong>콜백 헬로 인해 가독성이 나쁘고</strong> 비동기 처리중\n발생한 에러의 처리가 곤란하며 여러개의 비동기처리를 한번에 하는곳에대한 한계도있다\n밑에있는 예제들을 참고하시면 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function a(cb){\n  setTimeout(function(){\n    console.log('a')\n    cb()\n  },1000)\n}\n\nfunction b(cb){\n  setTimeout(function(){\n    console.log('b')\n    cb()\n  },1000)\n}\nfunction c(cb){\n  setTimeout(function(){\n    console.log('c')\n    cb()\n  },1000)\n}\nfunction d(cb){\n  setTimeout(function(){\n    console.log('d')\n    cb()\n  },1000)\n}\n\na(function(){\n  b(function(){\n    c(function(){\n      d()  // 가독성 과 효율성이 떨어진다.\n    })\n  })\n})</code></pre></div>\n<h2 id=\"promise\" style=\"position:relative;\"><a href=\"#promise\" aria-label=\"promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>promise</h2>\n<ul>\n<li>promise 객체와 resolve를 할당받은 메소드만이 async와 await 키워드를 사용할 수 있다.</li>\n<li>\n<p>promise 객체를 부여받은 메소드는 내부에는 resolve() 메소드를 부여한다.</p>\n<h3 id=\"resolve\" style=\"position:relative;\"><a href=\"#resolve\" aria-label=\"resolve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>resolve</h3>\n</li>\n<li>\n<p>로직이 마무리 가 되었을때 실행되는 구조입니다.</p>\n<h3 id=\"reject\" style=\"position:relative;\"><a href=\"#reject\" aria-label=\"reject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reject</h3>\n</li>\n<li>비동기처리에서 error 가 발생했을때 갖는구조 입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  function a(){\n    return new Promise((resolve,reject) => {\n      if(isError){\n        reject(Error)\n      }\n      setTimeout(()=>{\n        console.log('a')\n        resolve('done')\n      },1000)\n    })\n  }</code></pre></div>\n<h3 id=\"promise-에외처리\" style=\"position:relative;\"><a href=\"#promise-%EC%97%90%EC%99%B8%EC%B2%98%EB%A6%AC\" aria-label=\"promise 에외처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>promise 에외처리</h3>\n<ul>\n<li>promise의 기본적인 예외처리는 try,catch를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  async function asyncFunc(){\n    try{\n      const res=  await a () \n      console.log(res)\n    } catch (error) {\n      console.log(error)\n      alert(error.message)\n    } finally{\n      console.log('done!')\n    }\n  }\n\n  asyncFunc()</code></pre></div>\n<h2 id=\"async-await\" style=\"position:relative;\"><a href=\"#async-await\" aria-label=\"async await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async-await</h2>\n<ul>\n<li>같은 개념이라고 생각하시면 편합니다.</li>\n<li>async -await 을 사용하는이유 가 <code class=\"language-text\">가독성</code>과 <code class=\"language-text\">코드가 간결해 질수가있다</code>는 장점들이 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function a(){\n  return new Promise( resolve => {\n    setTimeout(function(){\n      console.log('a')\n      resolve()\n    },1000)\n  })\n}\n\nfunction b() {\n  return new Promise( resolve =>{\n    setTimeout(function(){\n      console.log('b')\n      resolve()\n    },1000) \n  })\n}\nfunction c() {\n  return new Promise( resolve =>{\n    setTimeout(function(){\n      console.log('c')\n      resolve()\n    },1000) \n  })\n}\nfunction d() {\n  return new Promise( resolve =>{\n    setTimeout(function(){\n      console.log('d')\n      resolve()\n    },1000) \n  })\n}\na()\n  .then(() => b())\n  .then(() => c())\n  .then(() => d())</code></pre></div>\n<h3 id=\"async-await없아-비동기처리-하기\" style=\"position:relative;\"><a href=\"#async-await%EC%97%86%EC%95%84-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%B2%98%EB%A6%AC-%ED%95%98%EA%B8%B0\" aria-label=\"async await없아 비동기처리 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async, await없아 비동기처리 하기</h3>\n<p> -then(): resolve() 가 실행되고 난 뒤 동작할 코드 </p>\n<ul>\n<li>catch(): 에러 또는 연산실패 를 동작할 코드</li>\n<li>finally(): promise의 결과에 상관없이  promise 실행후 동작할 </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n function a(){\n   return new Promise((resolve,reject) => {\n     if(isError){\n       reject(Error)\n     }\n     setTimeout(()=>{\n       console.log('a')\n       resolve('done')\n     },1000)\n   })\n }\n\n a() \n .then((res)=>{\n   console.log(res)\n })\n .catch((error)=>{\n     console.log(error)\n     alert(error.message)\n })\n .finally(()=>{\n\n })</code></pre></div>\n<h3 id=\"정리한-이유\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"정리한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리한 이유</h3>\n<blockquote>\n<p>1.동기 와 비동기 처리의 이해 를 정리하는 글을 올리게되었습니다.<br>\n2.실무에서 많이 사용하는 예제이며 ,핵심내용이기에 정리 해보았습니다.\n3.MovieApp을 만들면서 필요한 예제들은 프로젝트 업로드 후 정리해서 코드와 같이 업로드 하겠습니다.</p>\n</blockquote>","frontmatter":{"title":"동기 와 비동기 처리의 이해","date":"September 28, 2021"}}},"pageContext":{"slug":"/Vue/Async-Await/","previous":{"fields":{"slug":"/Vue/라이프사이클/"},"frontmatter":{"title":"Vue.js 2.0 라이프사이클"}},"next":{"fields":{"slug":"/Vue/store-및-vue-cli-/"},"frontmatter":{"title":"store 및 vue-cli"}}}},"staticQueryHashes":["2486386679","3128451518"]}